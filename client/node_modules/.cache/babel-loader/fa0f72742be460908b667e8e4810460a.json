{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActivitiesList, getCountries } from '../actions';\nimport styles from './SelectCountries.module.css';\nimport searchIco from \"../icons/manage_search_white_24dp.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectCountries(_ref) {\n  _s();\n\n  let {\n    countriesActivity\n  } = _ref;\n  const countries = useSelector(state => state.countries, () => {});\n  const [selectedCountries, setSelectedCountries] = useState([]); // Para que no aparezcan regiones vacias en el listado cuando filtro paises\n  // regionList debe ser una array de objetos { region='', hasCountrySelected=false }\n  // y setear cada vez que selectedCountries cambie.\n  // Usar esa propiedad para decidir si se muestra o no el titulo de la region\n\n  const [regionList, setRegionList] = useState({}); // const [regionList, setRegionList] = useState([]);\n\n  /* INITIALIZATION */\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCountries());\n    dispatch(getActivitiesList());\n  }, [dispatch]);\n  /* INIT AFTER LOADING : FILL SELECTED COUNTRIES */\n\n  useEffect(() => {\n    //// FILL REGION LIST\n    setRegionList(countries.map(obj => obj.region) // convierte el obj en arr\n    .filter((item, index, arr) => arr.indexOf(item) === index)) // filtra repeticiones);\n    .map(reg => ({\n      region: reg,\n      hasCountrySelected: false\n    })); //// FILL SELECTED COUNTRIES\n\n    const arr = countries.map(c => ({\n      id: c.id,\n      name: c.name,\n      region: c.region,\n      flag_icon: c.flag_icon,\n      selected: false\n    }));\n    arr.sort(function (a, b) {\n      const A = a.name.toUpperCase();\n      const B = b.name.toUpperCase();\n      if (A < B) return -1;\n      if (A > B) return 1;\n      return 0;\n    });\n    setSelectedCountries(arr);\n  }, [countries]);\n  useEffect(() => {\n    console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ regionList\", regionList);\n  }, [regionList]); // SELECTED COUNTRIES\n\n  function liClickHandler(e) {\n    // Puede hacerse mas elegante con map? Sin sacar una copia de selectedCountries?\n    const selectedCountriesCopy = [...selectedCountries];\n    selectedCountriesCopy.forEach(c => c.id === e.target.id && (c.selected = !c.selected));\n    setSelectedCountries(selectedCountriesCopy);\n    countriesActivity(selectedCountriesCopy);\n  } // SEARCH\n\n\n  const inputSearch = useRef();\n  const [searchText, setSearchText] = useState();\n  const [showSelected, setShowSelected] = useState(false);\n\n  function handleResetButton(e) {\n    e.preventDefault();\n    setSearchText('');\n    inputSearch.current.value = '';\n  }\n\n  function handleSearchText(e) {\n    setSearchText(e.target.value);\n  }\n\n  function showSelectedHandler(e) {\n    setShowSelected(e.target.checked);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectCountries, \"UH8kjzXhYJHuFu1AYFpLEKhCCbc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SelectCountries;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCountries\");","map":{"version":3,"sources":["/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","getActivitiesList","getCountries","styles","SelectCountries","countriesActivity","countries","state","selectedCountries","setSelectedCountries","regionList","setRegionList","dispatch","map","obj","region","filter","item","index","arr","indexOf","reg","hasCountrySelected","c","id","name","flag_icon","selected","sort","a","b","A","toUpperCase","B","console","log","liClickHandler","e","selectedCountriesCopy","forEach","target","inputSearch","searchText","setSearchText","showSelected","setShowSelected","handleResetButton","preventDefault","current","value","handleSearchText","showSelectedHandler","checked","container"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAqC,OAArC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,YAAhD;AACA,OAAOC,MAAP,MAAmB,8BAAnB;;;AAGA,eAAe,SAASC,eAAT,OAAgD;AAAA;;AAAA,MAAvB;AAAEC,IAAAA;AAAF,GAAuB;AAE3D,QAAMC,SAAS,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,SAAhB,EAA2B,MAAM,CAAG,CAApC,CAA7B;AAEA,QAAM,CAACE,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAAC,EAAD,CAA1D,CAJ2D,CAK3D;AACA;AACA;AACA;;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C,CAT2D,CAU3D;;AAEA;;AACA,QAAMe,QAAQ,GAAGZ,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,QAAQ,CAACV,YAAY,EAAb,CAAR;AACAU,IAAAA,QAAQ,CAACX,iBAAiB,EAAlB,CAAR;AACH,GAHQ,EAGN,CAACW,QAAD,CAHM,CAAT;AAIA;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAa,IAAAA,aAAa,CAACL,SAAS,CAClBO,GADS,CACJC,GAAD,IAASA,GAAG,CAACC,MADR,EACgB;AADhB,KAETC,MAFS,CAEF,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,KAAsBA,GAAG,CAACC,OAAJ,CAAYH,IAAZ,MAAsBC,KAF1C,CAAD,CAAb,CAEgE;AAFhE,KAGKL,GAHL,CAGSQ,GAAG,KAAK;AAACN,MAAAA,MAAM,EAACM,GAAR;AAAaC,MAAAA,kBAAkB,EAAE;AAAjC,KAAL,CAHZ,EAFY,CAMZ;;AACA,UAAMH,GAAG,GAAGb,SAAS,CAACO,GAAV,CAAeU,CAAD,KACtB;AACIC,MAAAA,EAAE,EAAED,CAAC,CAACC,EADV;AAEIC,MAAAA,IAAI,EAAEF,CAAC,CAACE,IAFZ;AAGIV,MAAAA,MAAM,EAAEQ,CAAC,CAACR,MAHd;AAIIW,MAAAA,SAAS,EAAEH,CAAC,CAACG,SAJjB;AAKIC,MAAAA,QAAQ,EAAE;AALd,KADsB,CAAd,CAAZ;AASAR,IAAAA,GAAG,CAACS,IAAJ,CAAS,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACrB,YAAMC,CAAC,GAAGF,CAAC,CAACJ,IAAF,CAAOO,WAAP,EAAV;AACA,YAAMC,CAAC,GAAGH,CAAC,CAACL,IAAF,CAAOO,WAAP,EAAV;AACA,UAAID,CAAC,GAAGE,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,UAAIF,CAAC,GAAGE,CAAR,EAAW,OAAO,CAAP;AACX,aAAO,CAAP;AACH,KAND;AAOAxB,IAAAA,oBAAoB,CAACU,GAAD,CAApB;AACH,GAxBQ,EAwBN,CAACb,SAAD,CAxBM,CAAT;AA0BAR,EAAAA,SAAS,CAAC,MAAK;AACXoC,IAAAA,OAAO,CAACC,GAAR,CAAY,yEAAZ,EAAuFzB,UAAvF;AACH,GAFQ,EAEP,CAACA,UAAD,CAFO,CAAT,CA7C2D,CAiD3D;;AACA,WAAS0B,cAAT,CAAwBC,CAAxB,EAA2B;AACvB;AACA,UAAMC,qBAAqB,GAAG,CAAC,GAAG9B,iBAAJ,CAA9B;AACA8B,IAAAA,qBAAqB,CAACC,OAAtB,CAA8BhB,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASa,CAAC,CAACG,MAAF,CAAShB,EAAlB,KAAyBD,CAAC,CAACI,QAAF,GAAa,CAACJ,CAAC,CAACI,QAAzC,CAAnC;AACAlB,IAAAA,oBAAoB,CAAC6B,qBAAD,CAApB;AACAjC,IAAAA,iBAAiB,CAACiC,qBAAD,CAAjB;AACH,GAxD0D,CA0D3D;;;AACA,QAAMG,WAAW,GAAG7C,MAAM,EAA1B;AACA,QAAM,CAAC8C,UAAD,EAAaC,aAAb,IAA8B9C,QAAQ,EAA5C;AACA,QAAM,CAAC+C,YAAD,EAAeC,eAAf,IAAkChD,QAAQ,CAAC,KAAD,CAAhD;;AAEA,WAASiD,iBAAT,CAA2BT,CAA3B,EAA8B;AAC1BA,IAAAA,CAAC,CAACU,cAAF;AACAJ,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAF,IAAAA,WAAW,CAACO,OAAZ,CAAoBC,KAApB,GAA4B,EAA5B;AACH;;AACD,WAASC,gBAAT,CAA0Bb,CAA1B,EAA6B;AACzBM,IAAAA,aAAa,CAACN,CAAC,CAACG,MAAF,CAASS,KAAV,CAAb;AACH;;AACD,WAASE,mBAAT,CAA6Bd,CAA7B,EAAgC;AAC5BQ,IAAAA,eAAe,CAACR,CAAC,CAACG,MAAF,CAASY,OAAV,CAAf;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEjD,MAAM,CAACkD;AAAvB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAhFuBjD,e;UAEFL,W,EAWDC,W;;;KAbGI,e","sourcesContent":["import React, { useRef } from 'react'\nimport { useState, useEffect, } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActivitiesList, getCountries } from '../actions'\nimport styles from './SelectCountries.module.css';\nimport searchIco from '../icons/manage_search_white_24dp.svg'\n\nexport default function SelectCountries({ countriesActivity }) {\n\n    const countries = useSelector(state => state.countries, () => { });\n\n    const [selectedCountries, setSelectedCountries] = useState([]);\n    // Para que no aparezcan regiones vacias en el listado cuando filtro paises\n    // regionList debe ser una array de objetos { region='', hasCountrySelected=false }\n    // y setear cada vez que selectedCountries cambie.\n    // Usar esa propiedad para decidir si se muestra o no el titulo de la region\n    const [regionList, setRegionList] = useState({});\n    // const [regionList, setRegionList] = useState([]);\n\n    /* INITIALIZATION */\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getCountries());\n        dispatch(getActivitiesList());\n    }, [dispatch])\n    /* INIT AFTER LOADING : FILL SELECTED COUNTRIES */\n    useEffect(() => {\n        //// FILL REGION LIST\n        setRegionList(countries\n            .map((obj) => obj.region) // convierte el obj en arr\n            .filter((item, index, arr) => arr.indexOf(item) === index)) // filtra repeticiones);\n            .map(reg => ({region:reg, hasCountrySelected: false}));\n        //// FILL SELECTED COUNTRIES\n        const arr = countries.map((c) => (\n            {\n                id: c.id,\n                name: c.name,\n                region: c.region,\n                flag_icon: c.flag_icon,\n                selected: false\n            }\n        ))\n        arr.sort(function (a, b) {\n            const A = a.name.toUpperCase();\n            const B = b.name.toUpperCase();\n            if (A < B) return -1;\n            if (A > B) return 1;\n            return 0;\n        });\n        setSelectedCountries(arr);\n    }, [countries]);\n\n    useEffect(()=> {\n        console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ regionList\", regionList);\n    },[regionList])\n\n    // SELECTED COUNTRIES\n    function liClickHandler(e) {\n        // Puede hacerse mas elegante con map? Sin sacar una copia de selectedCountries?\n        const selectedCountriesCopy = [...selectedCountries];\n        selectedCountriesCopy.forEach(c => c.id === e.target.id && (c.selected = !c.selected))\n        setSelectedCountries(selectedCountriesCopy);\n        countriesActivity(selectedCountriesCopy);\n    }\n\n    // SEARCH\n    const inputSearch = useRef();\n    const [searchText, setSearchText] = useState();\n    const [showSelected, setShowSelected] = useState(false);\n\n    function handleResetButton(e) {\n        e.preventDefault();\n        setSearchText('');\n        inputSearch.current.value = '';\n    }\n    function handleSearchText(e) {\n        setSearchText(e.target.value);\n    }\n    function showSelectedHandler(e) {\n        setShowSelected(e.target.checked);\n    }\n\n    return (\n        <div className={styles.container}>\n           \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}