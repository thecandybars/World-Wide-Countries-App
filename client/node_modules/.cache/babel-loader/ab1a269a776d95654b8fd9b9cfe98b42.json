{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActivitiesList, getCountries } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectCountries(_ref) {\n  _s();\n\n  let {\n    countriesActivity,\n    resetSelectedCountries\n  } = _ref;\n  console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 7 ~ SelectCountries ~ resetSelectedCountries\", resetSelectedCountries);\n  const countries = useSelector(state => state.countries, () => {});\n  const [selectedCountries, setSelectedCountries] = useState([]); // Para que no aparezcan regiones vacias en el listado cuando filtro paises\n  // regionList debe ser una array de objetos { region='', hasCountrySelected=false }\n  // y setear cada vez que selectedCountries cambie.\n  // Usar esa propiedad para decidir si se muestra o no el titulo de la region\n\n  const [regionList, setRegionList] = useState([]);\n\n  if (resetSelectedCountries) {\n    setSelectedCountries(selectedCountries.map(c => c.selected = false));\n  }\n  /* INITIALIZATION */\n\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCountries());\n    dispatch(getActivitiesList());\n  }, []);\n  /* INIT AFTER LOADING : FILL SELECTED COUNTRIES */\n\n  useEffect(() => {\n    if (true) {\n      //selectedCountries.length === 0 Lo quitÃ© porque renderizaba countries con el filtro de Home\n      //// FILL REGION LIST\n      setRegionList(countries.map(obj => obj.region) // convierte el obj en arr\n      .filter((item, index, arr) => arr.indexOf(item) === index)); // filtra repeticiones);\n      //// FILL SELECTED COUNTRIES\n\n      const arr = countries.map(c => ({\n        id: c.id,\n        name: c.name,\n        region: c.region,\n        flag_icon: c.flag_icon,\n        selected: false\n      }));\n      arr.sort(function (a, b) {\n        const A = a.name.toUpperCase();\n        const B = b.name.toUpperCase();\n        if (A < B) return -1;\n        if (A > B) return 1;\n        return 0;\n      });\n      setSelectedCountries(arr);\n    }\n  }, [countries]); // SELECTED COUNTRIES\n\n  function checkBoxCountriesHandler(e) {\n    const x = selectedCountries.map(c => c.id === e.target.name && (c.selected = e.target.checked));\n    countriesActivity(x);\n    console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 61 ~ checkBoxCountriesHandler ~ x\", x);\n  } // SEARCH\n\n\n  const inputSearch = useRef();\n  const [searchText, setSearchText] = useState();\n  const [showSelected, setShowSelected] = useState(false);\n\n  function handleResetButton(e) {\n    e.preventDefault();\n    setSearchText('');\n    inputSearch.current.value = '';\n  }\n\n  function handleSearchText(e) {\n    setSearchText(e.target.value);\n  }\n\n  function showSelectedHandler(e) {\n    setShowSelected(e.target.checked);\n  } // useEffect(() => {\n  //     console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ selectedCountries\", selectedCountries)\n  // }, [selectedCountries])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Search:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"searchText\",\n        name: \"searchText\",\n        onChange: handleSearchText,\n        ref: inputSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: handleResetButton,\n        value: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Show select countries \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: showSelectedHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: selectedCountries && regionList.map(region => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), selectedCountries.map(c => c.region === region && (searchText ? c.name.toUpperCase().includes(searchText.toUpperCase()) : true) && (showSelected ? c.selected : true) && /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: c.id,\n            onChange: checkBoxCountriesHandler,\n            value: c.selected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 37\n          }, this), c.name, c.flag_icon]\n        }, c.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 34\n        }, this))]\n      }, region, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectCountries, \"trwGOTnJPw8N18Ggj1JdfrpfBwo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SelectCountries;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCountries\");","map":{"version":3,"sources":["/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","getActivitiesList","getCountries","SelectCountries","countriesActivity","resetSelectedCountries","console","log","countries","state","selectedCountries","setSelectedCountries","regionList","setRegionList","map","c","selected","dispatch","obj","region","filter","item","index","arr","indexOf","id","name","flag_icon","sort","a","b","A","toUpperCase","B","checkBoxCountriesHandler","e","x","target","checked","inputSearch","searchText","setSearchText","showSelected","setShowSelected","handleResetButton","preventDefault","current","value","handleSearchText","showSelectedHandler","includes"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport { useState, useEffect, } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActivitiesList, getCountries } from '../actions'\n\nexport default function SelectCountries({ countriesActivity, resetSelectedCountries }) {\n    console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 7 ~ SelectCountries ~ resetSelectedCountries\", resetSelectedCountries)\n\n    const countries = useSelector(state => state.countries, () => { });\n\n    const [selectedCountries, setSelectedCountries] = useState([]);\n    // Para que no aparezcan regiones vacias en el listado cuando filtro paises\n    // regionList debe ser una array de objetos { region='', hasCountrySelected=false }\n    // y setear cada vez que selectedCountries cambie.\n    // Usar esa propiedad para decidir si se muestra o no el titulo de la region\n    const [regionList, setRegionList] = useState([]);\n\n    if (resetSelectedCountries) {\n        setSelectedCountries(selectedCountries.map(c => c.selected = false));\n    }\n\n    /* INITIALIZATION */\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getCountries());\n        dispatch(getActivitiesList());\n    }, [])\n    /* INIT AFTER LOADING : FILL SELECTED COUNTRIES */\n    useEffect(() => {\n        if (true) { //selectedCountries.length === 0 Lo quitÃ© porque renderizaba countries con el filtro de Home\n            //// FILL REGION LIST\n            setRegionList(countries\n                .map((obj) => obj.region) // convierte el obj en arr\n                .filter((item, index, arr) => arr.indexOf(item) === index)); // filtra repeticiones);\n            //// FILL SELECTED COUNTRIES\n            const arr = countries.map(c => (\n                {\n                    id: c.id,\n                    name: c.name,\n                    region: c.region,\n                    flag_icon: c.flag_icon,\n                    selected: false\n                }\n            ))\n            arr.sort(function (a, b) {\n                const A = a.name.toUpperCase();\n                const B = b.name.toUpperCase();\n                if (A < B) return -1;\n                if (A > B) return 1;\n                return 0;\n            });\n            setSelectedCountries(arr);\n        }\n    }, [countries]);\n\n    // SELECTED COUNTRIES\n    function checkBoxCountriesHandler(e) {\n        const x = selectedCountries\n            .map(c => c.id === e.target.name && (c.selected = e.target.checked));\n        countriesActivity(x);\n        console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 61 ~ checkBoxCountriesHandler ~ x\", x)\n    }\n\n    // SEARCH\n    const inputSearch = useRef();\n    const [searchText, setSearchText] = useState();\n    const [showSelected, setShowSelected] = useState(false);\n\n    function handleResetButton(e) {\n        e.preventDefault();\n        setSearchText('');\n        inputSearch.current.value = '';\n    }\n    function handleSearchText(e) {\n        setSearchText(e.target.value);\n    }\n    function showSelectedHandler(e) {\n        setShowSelected(e.target.checked);\n    }\n\n    // useEffect(() => {\n    //     console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ selectedCountries\", selectedCountries)\n    // }, [selectedCountries])\n\n    return (\n        <div>\n            {/* SEARCH TEXT */}\n            <div>\n                <label>Search:</label>\n                <input type=\"text\" id=\"searchText\" name=\"searchText\" onChange={handleSearchText} ref={inputSearch} />\n                <input type=\"button\" onClick={handleResetButton} value=\"Reset\" />\n                <label>Show select countries </label>\n                <input type='checkbox' onChange={showSelectedHandler} />\n            </div>\n            {/* COUNTRY LIST */}\n            <ul>\n                {\n                    selectedCountries &&\n                    regionList.map(region =>\n                        <div key={region}>\n                            <h2>{region}</h2>\n                            {selectedCountries.map(c =>\n                                (c.region === region\n                                    && (searchText\n                                        ? c.name.toUpperCase().includes(searchText.toUpperCase())\n                                        : true)\n                                    && (showSelected ? c.selected : true)\n                                ) &&\n                                (<li key={c.id}>\n                                    <input type='checkbox' name={c.id} onChange={checkBoxCountriesHandler} value={c.selected} />\n                                    {c.name}\n                                    {c.flag_icon}\n                                </li>)\n                            )}\n                        </div>\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}