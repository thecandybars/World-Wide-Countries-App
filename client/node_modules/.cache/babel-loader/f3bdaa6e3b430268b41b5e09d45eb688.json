{"ast":null,"code":"import axios from 'axios'; //export const GET_COUNTRIES = 'GET_COUNTRIES';\n\nexport function getCountries() {\n  // Estudiar este uso de dispatch!!!\n  return async function (dispatch) {\n    const countries = await axios.get('http://localhost:3001/countries');\n    return dispatch({\n      type: 'GET_COUNTRIES',\n      payload: countries.data\n    });\n  };\n}\nexport function getCountryDetails(id) {\n  return async function (dispatch) {\n    const country = await axios.get('http://localhost:3001/countries/' + id);\n    return dispatch({\n      type: 'GET_COUNTRY_DETAIL',\n      payload: country.data\n    });\n  };\n}\nexport function getActivitiesList() {\n  return async function (dispatch) {\n    const activitiesList = await axios.get('http://localhost:3001/activities');\n    return dispatch({\n      type: 'GET_ACTIVITIES_LIST',\n      payload: activitiesList.data\n    });\n  };\n}\nexport function getRegionsList(countries) {\n  const regions = countries.map(obj => obj.region) // convierte el obj en arr\n  .filter((item, index, arr) => arr.indexOf(item) === index); // filtra repeticiones\n\n  return {\n    type: 'GET_REGIONS_LIST',\n    payload: regions\n  };\n}\nexport function searchCountry(searchText) {\n  return async function (dispatch) {\n    const searchResult = await axios.get('http://localhost:3001/countries/?name=' + searchText);\n    return dispatch({\n      type: 'SEARCH_TEXT',\n      payload: searchResult.data\n    });\n  };\n} // export function filterOrderCountries(order, filter, countries) {\n//     //FILTER\n//     const { region, activity } = filter;\n//     if (region && region !== 'all') {\n//         countries = countries.filter(country => country.region === region);\n//     }\n//     if (activity && activity !== 'all') {\n//         countries = countries.filter(country => country.activities.find(act => act.name === activity));\n//     }\n//     //ORDER\n//     if (order === 'asc') {\n//         countries.sort(function (a, b) {\n//             const A = a.name.toUpperCase();\n//             const B = b.name.toUpperCase();\n//             if (A < B) return -1;\n//             if (A > B) return 1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     if (order === 'des') {\n//         countries.sort(function (a, b) {\n//             const A = a.name.toUpperCase();\n//             const B = b.name.toUpperCase();\n//             if (A < B) return 1;\n//             if (A > B) return -1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     if (order === 'popUp') {\n//         countries.sort(function (a, b) {\n//             const A = a.population;\n//             const B = b.population;\n//             if (A < B) return 1;\n//             if (A > B) return -1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     if (order === 'popDown') {\n//         countries.sort(function (a, b) {\n//             const A = a.population;\n//             const B = b.population;\n//             if (A < B) return -1;\n//             if (A > B) return 1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     return {\n//         type: 'ORDER_FILTER',\n//         payload: countries\n//     }\n// }\n\nexport function filterSearchOrderCountries(filter, search, order, countries) {\n  //FILTER\n  const {\n    region,\n    activity\n  } = filter;\n\n  if (region && region !== 'all') {\n    countries = countries.filter(country => country.region === region);\n  }\n\n  if (activity && activity !== 'all') {\n    countries = countries.filter(country => country.activities.find(act => act.name === activity));\n  } //SEARCH\n\n\n  if (search && search !== '') {\n    countries = countries.filter(c => c.name.toUpperCase().includes(search.toUpperCase()));\n  } //ORDER\n\n\n  if (order === 'asc') {\n    countries.sort(function (a, b) {\n      const A = a.name.toUpperCase();\n      const B = b.name.toUpperCase();\n      if (A < B) return -1;\n      if (A > B) return 1;\n      return 0; // Son iguales\n    });\n  }\n\n  ;\n\n  if (order === 'des') {\n    countries.sort(function (a, b) {\n      const A = a.name.toUpperCase();\n      const B = b.name.toUpperCase();\n      if (A < B) return 1;\n      if (A > B) return -1;\n      return 0; // Son iguales\n    });\n  }\n\n  ;\n\n  if (order === 'popUp') {\n    countries.sort(function (a, b) {\n      const A = a.population;\n      const B = b.population;\n      if (A < B) return 1;\n      if (A > B) return -1;\n      return 0; // Son iguales\n    });\n  }\n\n  ;\n\n  if (order === 'popDown') {\n    countries.sort(function (a, b) {\n      const A = a.population;\n      const B = b.population;\n      if (A < B) return -1;\n      if (A > B) return 1;\n      return 0; // Son iguales\n    });\n  }\n\n  ;\n  return {\n    type: 'ORDER_FILTER',\n    payload: countries\n  };\n}","map":{"version":3,"sources":["/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/actions/index.js"],"names":["axios","getCountries","dispatch","countries","get","type","payload","data","getCountryDetails","id","country","getActivitiesList","activitiesList","getRegionsList","regions","map","obj","region","filter","item","index","arr","indexOf","searchCountry","searchText","searchResult","filterSearchOrderCountries","search","order","activity","activities","find","act","name","c","toUpperCase","includes","sort","a","b","A","B","population"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC3B;AACA,SAAO,gBAAgBC,QAAhB,EAA0B;AAC7B,UAAMC,SAAS,GAAG,MAAMH,KAAK,CAACI,GAAN,CAAU,iCAAV,CAAxB;AACA,WAAOF,QAAQ,CAAC;AACZG,MAAAA,IAAI,EAAE,eADM;AAEZC,MAAAA,OAAO,EAAEH,SAAS,CAACI;AAFP,KAAD,CAAf;AAIH,GAND;AAOH;AACD,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAClC,SAAO,gBAAgBP,QAAhB,EAA0B;AAC7B,UAAMQ,OAAO,GAAG,MAAMV,KAAK,CAACI,GAAN,CAAU,qCAAqCK,EAA/C,CAAtB;AACA,WAAOP,QAAQ,CAAC;AACZG,MAAAA,IAAI,EAAE,oBADM;AAEZC,MAAAA,OAAO,EAAEI,OAAO,CAACH;AAFL,KAAD,CAAf;AAIH,GAND;AAOH;AACD,OAAO,SAASI,iBAAT,GAA6B;AAChC,SAAO,gBAAgBT,QAAhB,EAA0B;AAC7B,UAAMU,cAAc,GAAG,MAAMZ,KAAK,CAACI,GAAN,CAAU,kCAAV,CAA7B;AACA,WAAOF,QAAQ,CAAC;AACZG,MAAAA,IAAI,EAAE,qBADM;AAEZC,MAAAA,OAAO,EAAEM,cAAc,CAACL;AAFZ,KAAD,CAAf;AAIH,GAND;AAOH;AAED,OAAO,SAASM,cAAT,CAAwBV,SAAxB,EAAmC;AACtC,QAAMW,OAAO,GAAGX,SAAS,CACpBY,GADW,CACNC,GAAD,IAASA,GAAG,CAACC,MADN,EACc;AADd,GAEXC,MAFW,CAEJ,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,KAAsBA,GAAG,CAACC,OAAJ,CAAYH,IAAZ,MAAsBC,KAFxC,CAAhB,CADsC,CAG0B;;AAChE,SAAO;AACHf,IAAAA,IAAI,EAAE,kBADH;AAEHC,IAAAA,OAAO,EAAEQ;AAFN,GAAP;AAIH;AAED,OAAO,SAASS,aAAT,CAAuBC,UAAvB,EAAmC;AACtC,SAAO,gBAAgBtB,QAAhB,EAA0B;AAC7B,UAAMuB,YAAY,GAAG,MAAMzB,KAAK,CAACI,GAAN,CAAU,2CAA2CoB,UAArD,CAA3B;AACA,WAAOtB,QAAQ,CAAC;AACZG,MAAAA,IAAI,EAAE,aADM;AAEZC,MAAAA,OAAO,EAAEmB,YAAY,CAAClB;AAFV,KAAD,CAAf;AAIH,GAND;AAOH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmB,0BAAT,CAAoCR,MAApC,EAA4CS,MAA5C,EAAoDC,KAApD,EAA2DzB,SAA3D,EAAsE;AACzE;AACA,QAAM;AAAEc,IAAAA,MAAF;AAAUY,IAAAA;AAAV,MAAuBX,MAA7B;;AACA,MAAID,MAAM,IAAIA,MAAM,KAAK,KAAzB,EAAgC;AAC5Bd,IAAAA,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBR,OAAO,IAAIA,OAAO,CAACO,MAAR,KAAmBA,MAA/C,CAAZ;AACH;;AACD,MAAIY,QAAQ,IAAIA,QAAQ,KAAK,KAA7B,EAAoC;AAChC1B,IAAAA,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBR,OAAO,IAAIA,OAAO,CAACoB,UAAR,CAAmBC,IAAnB,CAAwBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAaJ,QAA5C,CAA5B,CAAZ;AACH,GARwE,CASzE;;;AACA,MAAIF,MAAM,IAAIA,MAAM,KAAK,EAAzB,EAA6B;AACzBxB,IAAAA,SAAS,GAAGA,SAAS,CAACe,MAAV,CAAiBgB,CAAC,IAAIA,CAAC,CAACD,IAAF,CAAOE,WAAP,GAAqBC,QAArB,CAA8BT,MAAM,CAACQ,WAAP,EAA9B,CAAtB,CAAZ;AACH,GAZwE,CAazE;;;AACA,MAAIP,KAAK,KAAK,KAAd,EAAqB;AACjBzB,IAAAA,SAAS,CAACkC,IAAV,CAAe,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B,YAAMC,CAAC,GAAGF,CAAC,CAACL,IAAF,CAAOE,WAAP,EAAV;AACA,YAAMM,CAAC,GAAGF,CAAC,CAACN,IAAF,CAAOE,WAAP,EAAV;AACA,UAAIK,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,UAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAP;AACX,aAAO,CAAP,CAL2B,CAKf;AACf,KAND;AAOH;;AAAA;;AACD,MAAIb,KAAK,KAAK,KAAd,EAAqB;AACjBzB,IAAAA,SAAS,CAACkC,IAAV,CAAe,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B,YAAMC,CAAC,GAAGF,CAAC,CAACL,IAAF,CAAOE,WAAP,EAAV;AACA,YAAMM,CAAC,GAAGF,CAAC,CAACN,IAAF,CAAOE,WAAP,EAAV;AACA,UAAIK,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAP;AACX,UAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,aAAO,CAAP,CAL2B,CAKf;AACf,KAND;AAOH;;AAAA;;AACD,MAAIb,KAAK,KAAK,OAAd,EAAuB;AACnBzB,IAAAA,SAAS,CAACkC,IAAV,CAAe,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B,YAAMC,CAAC,GAAGF,CAAC,CAACI,UAAZ;AACA,YAAMD,CAAC,GAAGF,CAAC,CAACG,UAAZ;AACA,UAAIF,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAP;AACX,UAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,aAAO,CAAP,CAL2B,CAKf;AACf,KAND;AAOH;;AAAA;;AACD,MAAIb,KAAK,KAAK,SAAd,EAAyB;AACrBzB,IAAAA,SAAS,CAACkC,IAAV,CAAe,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC3B,YAAMC,CAAC,GAAGF,CAAC,CAACI,UAAZ;AACA,YAAMD,CAAC,GAAGF,CAAC,CAACG,UAAZ;AACA,UAAIF,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,UAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAP;AACX,aAAO,CAAP,CAL2B,CAKf;AACf,KAND;AAOH;;AAAA;AACD,SAAO;AACHpC,IAAAA,IAAI,EAAE,cADH;AAEHC,IAAAA,OAAO,EAAEH;AAFN,GAAP;AAIH","sourcesContent":["import axios from 'axios';\n\n//export const GET_COUNTRIES = 'GET_COUNTRIES';\n\nexport function getCountries() {\n    // Estudiar este uso de dispatch!!!\n    return async function (dispatch) {\n        const countries = await axios.get('http://localhost:3001/countries');\n        return dispatch({\n            type: 'GET_COUNTRIES',\n            payload: countries.data,\n        })\n    }\n}\nexport function getCountryDetails(id) {\n    return async function (dispatch) {\n        const country = await axios.get('http://localhost:3001/countries/' + id);\n        return dispatch({\n            type: 'GET_COUNTRY_DETAIL',\n            payload: country.data,\n        })\n    }\n}\nexport function getActivitiesList() {\n    return async function (dispatch) {\n        const activitiesList = await axios.get('http://localhost:3001/activities');\n        return dispatch({\n            type: 'GET_ACTIVITIES_LIST',\n            payload: activitiesList.data,\n        })\n    }\n}\n\nexport function getRegionsList(countries) {\n    const regions = countries\n        .map((obj) => obj.region) // convierte el obj en arr\n        .filter((item, index, arr) => arr.indexOf(item) === index); // filtra repeticiones\n    return {\n        type: 'GET_REGIONS_LIST',\n        payload: regions\n    }\n}\n\nexport function searchCountry(searchText) {\n    return async function (dispatch) {\n        const searchResult = await axios.get('http://localhost:3001/countries/?name=' + searchText);\n        return dispatch({\n            type: 'SEARCH_TEXT',\n            payload: searchResult.data,\n        })\n    }\n}\n\n// export function filterOrderCountries(order, filter, countries) {\n//     //FILTER\n//     const { region, activity } = filter;\n//     if (region && region !== 'all') {\n//         countries = countries.filter(country => country.region === region);\n//     }\n//     if (activity && activity !== 'all') {\n//         countries = countries.filter(country => country.activities.find(act => act.name === activity));\n//     }\n//     //ORDER\n//     if (order === 'asc') {\n//         countries.sort(function (a, b) {\n//             const A = a.name.toUpperCase();\n//             const B = b.name.toUpperCase();\n//             if (A < B) return -1;\n//             if (A > B) return 1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     if (order === 'des') {\n//         countries.sort(function (a, b) {\n//             const A = a.name.toUpperCase();\n//             const B = b.name.toUpperCase();\n//             if (A < B) return 1;\n//             if (A > B) return -1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     if (order === 'popUp') {\n//         countries.sort(function (a, b) {\n//             const A = a.population;\n//             const B = b.population;\n//             if (A < B) return 1;\n//             if (A > B) return -1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     if (order === 'popDown') {\n//         countries.sort(function (a, b) {\n//             const A = a.population;\n//             const B = b.population;\n//             if (A < B) return -1;\n//             if (A > B) return 1;\n//             return 0;   // Son iguales\n//         });\n//     };\n//     return {\n//         type: 'ORDER_FILTER',\n//         payload: countries\n//     }\n// }\nexport function filterSearchOrderCountries(filter, search, order, countries) {\n    //FILTER\n    const { region, activity } = filter;\n    if (region && region !== 'all') {\n        countries = countries.filter(country => country.region === region);\n    }\n    if (activity && activity !== 'all') {\n        countries = countries.filter(country => country.activities.find(act => act.name === activity));\n    }\n    //SEARCH\n    if (search && search !== '') {\n        countries = countries.filter(c => c.name.toUpperCase().includes(search.toUpperCase()))\n    }\n    //ORDER\n    if (order === 'asc') {\n        countries.sort(function (a, b) {\n            const A = a.name.toUpperCase();\n            const B = b.name.toUpperCase();\n            if (A < B) return -1;\n            if (A > B) return 1;\n            return 0;   // Son iguales\n        });\n    };\n    if (order === 'des') {\n        countries.sort(function (a, b) {\n            const A = a.name.toUpperCase();\n            const B = b.name.toUpperCase();\n            if (A < B) return 1;\n            if (A > B) return -1;\n            return 0;   // Son iguales\n        });\n    };\n    if (order === 'popUp') {\n        countries.sort(function (a, b) {\n            const A = a.population;\n            const B = b.population;\n            if (A < B) return 1;\n            if (A > B) return -1;\n            return 0;   // Son iguales\n        });\n    };\n    if (order === 'popDown') {\n        countries.sort(function (a, b) {\n            const A = a.population;\n            const B = b.population;\n            if (A < B) return -1;\n            if (A > B) return 1;\n            return 0;   // Son iguales\n        });\n    };\n    return {\n        type: 'ORDER_FILTER',\n        payload: countries\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}