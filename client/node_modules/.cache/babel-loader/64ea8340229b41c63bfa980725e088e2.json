{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActivitiesList, getCountries } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectCountries(_ref) {\n  _s();\n\n  let {\n    countriesActivity\n  } = _ref;\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [regionList, setRegionList] = useState([]); // Para que no aparezcan regiones vacias en el listado cuando filtro paises\n  // regionList debe ser una array de objetos { region='', hasCountrySelected=false }\n  // y setear cada vez que selectedCountries cambie.\n  // Usar esa propiedad para decidir si se muestra o no el titulo de la region\n\n  /* INITIALIZATION */\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCountries());\n    dispatch(getActivitiesList());\n  }, []);\n  /* INIT AFTER LOADING : FILL SELECTED COUNTRIES */\n\n  useEffect(() => {\n    if (selectedCountries.length === 0) {\n      //// FILL REGION LIST\n      setRegionList(countries.map(obj => obj.region) // convierte el obj en arr\n      .filter((item, index, arr) => arr.indexOf(item) === index)); // filtra repeticiones);\n      //// FILL SELECTED COUNTRIES\n\n      const arr = countries.map(c => ({\n        id: c.id,\n        name: c.name,\n        region: c.region,\n        flag_icon: c.flag_icon,\n        selected: false\n      }));\n      arr.sort(function (a, b) {\n        const A = a.name.toUpperCase();\n        const B = b.name.toUpperCase();\n        if (A < B) return -1;\n        if (A > B) return 1;\n        return 0;\n      });\n      setSelectedCountries(arr);\n    }\n  }, [countries]); // SELECTED COUNTRIES\n\n  function checkBoxCountriesHandler(e) {\n    const selectedCountriesCopy = [...selectedCountries];\n    selectedCountriesCopy.forEach(c => c.id === e.target.name && (c.selected = e.target.checked));\n    setSelectedCountries(selectedCountriesCopy);\n    countriesActivity(selectedCountriesCopy);\n  } // SEARCH\n\n\n  const inputSearch = useRef();\n  const [searchText, setSearchText] = useState();\n  const [showSelected, setShowSelected] = useState(false);\n\n  function handleResetButton(e) {\n    e.preventDefault();\n    setSearchText('');\n    inputSearch.current.value = '';\n  }\n\n  function handleSearchText(e) {\n    setSearchText(e.target.value);\n  }\n\n  function showSelectedHandler(e) {\n    setShowSelected(e.target.checked);\n  } // useEffect(() => {\n  //     console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ selectedCountries\", selectedCountries)\n  // }, [selectedCountries])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Search:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"searchText\",\n        name: \"searchText\",\n        onChange: handleSearchText,\n        ref: inputSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: handleResetButton,\n        value: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Show select countries \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: showSelectedHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: selectedCountries && regionList.map(region => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this), selectedCountries.map(c => c.region === region && (searchText ? c.name.toUpperCase().includes(searchText.toUpperCase()) : true) && (showSelected ? c.selected : true) && /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: c.id,\n            onChange: checkBoxCountriesHandler,\n            value: c.selected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 37\n          }, this), c.name, c.flag_icon]\n        }, c.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 34\n        }, this))]\n      }, region, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectCountries, \"8ZAVgyfTFNYvtB602ZEgLYdSKzQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = SelectCountries;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCountries\");","map":{"version":3,"sources":["/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","getActivitiesList","getCountries","SelectCountries","countriesActivity","selectedCountries","setSelectedCountries","regionList","setRegionList","dispatch","length","countries","map","obj","region","filter","item","index","arr","indexOf","c","id","name","flag_icon","selected","sort","a","b","A","toUpperCase","B","checkBoxCountriesHandler","e","selectedCountriesCopy","forEach","target","checked","inputSearch","searchText","setSearchText","showSelected","setShowSelected","handleResetButton","preventDefault","current","value","handleSearchText","showSelectedHandler","includes"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport { useState, useEffect, } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getActivitiesList, getCountries } from '../actions'\n\nexport default function SelectCountries({ countriesActivity }) {\n\n    const [selectedCountries, setSelectedCountries] = useState([]);\n    const [regionList, setRegionList] = useState([]);\n    // Para que no aparezcan regiones vacias en el listado cuando filtro paises\n    // regionList debe ser una array de objetos { region='', hasCountrySelected=false }\n    // y setear cada vez que selectedCountries cambie.\n    // Usar esa propiedad para decidir si se muestra o no el titulo de la region\n\n    /* INITIALIZATION */\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getCountries());\n        dispatch(getActivitiesList());\n    }, [])\n    /* INIT AFTER LOADING : FILL SELECTED COUNTRIES */\n    useEffect(() => {\n        if (selectedCountries.length === 0) {\n            //// FILL REGION LIST\n            setRegionList(countries\n                .map((obj) => obj.region) // convierte el obj en arr\n                .filter((item, index, arr) => arr.indexOf(item) === index)); // filtra repeticiones);\n            //// FILL SELECTED COUNTRIES\n            const arr = countries.map((c) => (\n                {\n                    id: c.id,\n                    name: c.name,\n                    region: c.region,\n                    flag_icon: c.flag_icon,\n                    selected: false\n                }\n            ))\n            arr.sort(function (a, b) {\n                const A = a.name.toUpperCase();\n                const B = b.name.toUpperCase();\n                if (A < B) return -1;\n                if (A > B) return 1;\n                return 0;\n            });\n            setSelectedCountries(arr);\n        }\n    }, [countries]);\n\n    // SELECTED COUNTRIES\n    function checkBoxCountriesHandler(e) {\n        const selectedCountriesCopy = [...selectedCountries];\n        selectedCountriesCopy.forEach(c => c.id === e.target.name && (c.selected = e.target.checked))\n        setSelectedCountries(selectedCountriesCopy);\n        countriesActivity(selectedCountriesCopy);\n    }\n    // SEARCH\n    const inputSearch = useRef();\n    const [searchText, setSearchText] = useState();\n    const [showSelected, setShowSelected] = useState(false);\n\n    function handleResetButton(e) {\n        e.preventDefault();\n        setSearchText('');\n        inputSearch.current.value = '';\n    }\n    function handleSearchText(e) {\n        setSearchText(e.target.value);\n    }\n    function showSelectedHandler(e) {\n        setShowSelected(e.target.checked);\n    }\n\n    // useEffect(() => {\n    //     console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ selectedCountries\", selectedCountries)\n    // }, [selectedCountries])\n\n    return (\n        <div>\n            {/* SEARCH TEXT */}\n            <div>\n                <label>Search:</label>\n                <input type=\"text\" id=\"searchText\" name=\"searchText\" onChange={handleSearchText} ref={inputSearch} />\n                <input type=\"button\" onClick={handleResetButton} value=\"Reset\" />\n                <label>Show select countries </label>\n                <input type='checkbox' onChange={showSelectedHandler} />\n            </div>\n            {/* COUNTRY LIST */}\n            <ul>\n                {\n                    selectedCountries &&\n                    regionList.map(region =>\n                        <div key={region}>\n                            <h2>{region}</h2>\n                            {selectedCountries.map(c =>\n                                (c.region === region\n                                    && (searchText\n                                        ? c.name.toUpperCase().includes(searchText.toUpperCase())\n                                        : true)\n                                    && (showSelected ? c.selected : true)\n                                ) &&\n                                (<li key={c.id}>\n                                    <input type='checkbox' name={c.id} onChange={checkBoxCountriesHandler} value={c.selected} />\n                                    {c.name}\n                                    {c.flag_icon}\n                                </li>)\n                            )}\n                        </div>\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}