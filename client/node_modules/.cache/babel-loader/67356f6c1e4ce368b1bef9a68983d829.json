{"ast":null,"code":"var _jsxFileName = \"/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectCountries(_ref) {\n  _s();\n\n  let {\n    countriesActivity\n  } = _ref;\n  const countries = useSelector(state => state.countries, () => {});\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [selectedCountriesBk, setSelectedCountriesBk] = useState([]);\n  const [regionList, setRegionList] = useState([]); // INIT AFTER LOADING\n\n  useEffect(() => {\n    if (selectedCountries.length === 0) {\n      //// FILL REGION LIST\n      setRegionList(countries.map(obj => obj.region) // convierte el obj en arr\n      .filter((item, index, arr) => arr.indexOf(item) === index)); // filtra repeticiones);\n      //// FILL SELECTED COUNTRIES\n\n      const arr = [];\n      countries.forEach(c => {\n        const obj = {\n          id: c.id,\n          name: c.name,\n          region: c.region,\n          flag_icon: c.flag_icon,\n          selected: false\n        };\n        arr.push(obj);\n      });\n      arr.sort(function (a, b) {\n        const A = a.name.toUpperCase();\n        const B = b.name.toUpperCase();\n        if (A < B) return -1;\n        if (A > B) return 1;\n        return 0;\n      });\n      setSelectedCountries(arr); //// BACKUP SELECTED_COUNTRIES IN ALL_COUNTRIES\n\n      setSelectedCountriesBk(arr);\n    }\n  }, [countries]); // SELECTED COUNTRIES\n\n  useEffect(() => {}, [selectedCountries]);\n\n  function checkBoxHandler(e) {\n    const selectedCountriesCopy = [...selectedCountries];\n    selectedCountriesCopy.forEach(c => c.id === e.target.name && (c.selected = e.target.checked));\n    setSelectedCountries(selectedCountriesCopy);\n    countriesActivity(selectedCountries);\n  } // SEARCH\n\n\n  const inputSearch = useRef();\n  const [searchText, setSearchText] = useState();\n\n  function handleResetButton(e) {\n    e.preventDefault();\n    setSearchText('');\n    inputSearch.current.value = '';\n  }\n\n  function handleSearchText(e) {\n    setSearchText(e.target.value);\n  } // useEffect(() => {\n  //     console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ selectedCountries\", selectedCountries)\n  // }, [selectedCountries])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Search:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"searchText\",\n        name: \"searchText\",\n        onChange: handleSearchText,\n        ref: inputSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        onClick: handleResetButton,\n        value: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: selectedCountries && regionList.map(region => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this), selectedCountries.map(c => c.region === region && (searchText ? c.name.toUpperCase().includes(searchText.toUpperCase()) : true) && /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            name: c.id,\n            onChange: checkBoxHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 37\n          }, this), c.name, c.flag_icon]\n        }, c.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 34\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectCountries, \"Dc+hb0j+WG8T69eZ3K6AzrQIFkI=\", false, function () {\n  return [useSelector];\n});\n\n_c = SelectCountries;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCountries\");","map":{"version":3,"sources":["/Users/andres/Documents/Henry/bootcamp/PI-Countries-main/client/src/components/SelectCountries.jsx"],"names":["React","useRef","useState","useEffect","useSelector","useDispatch","SelectCountries","countriesActivity","countries","state","selectedCountries","setSelectedCountries","selectedCountriesBk","setSelectedCountriesBk","regionList","setRegionList","length","map","obj","region","filter","item","index","arr","indexOf","forEach","c","id","name","flag_icon","selected","push","sort","a","b","A","toUpperCase","B","checkBoxHandler","e","selectedCountriesCopy","target","checked","inputSearch","searchText","setSearchText","handleResetButton","preventDefault","current","value","handleSearchText","includes"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport { useState, useEffect, } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function SelectCountries({ countriesActivity }) {\n    const countries = useSelector(state => state.countries, () => { });\n\n    const [selectedCountries, setSelectedCountries] = useState([]);\n    const [selectedCountriesBk, setSelectedCountriesBk] = useState([]);\n    const [regionList, setRegionList] = useState([]);\n\n    // INIT AFTER LOADING\n    useEffect(() => {\n        if (selectedCountries.length === 0) {\n            //// FILL REGION LIST\n            setRegionList(countries\n                .map((obj) => obj.region) // convierte el obj en arr\n                .filter((item, index, arr) => arr.indexOf(item) === index)); // filtra repeticiones);\n            //// FILL SELECTED COUNTRIES\n            const arr = [];\n            countries.forEach(c => {\n                const obj = {\n                    id: c.id,\n                    name: c.name,\n                    region: c.region,\n                    flag_icon: c.flag_icon,\n                    selected: false\n                };\n                arr.push(obj);\n            })\n            arr.sort(function (a, b) {\n                const A = a.name.toUpperCase();\n                const B = b.name.toUpperCase();\n                if (A < B) return -1;\n                if (A > B) return 1;\n                return 0;\n            });\n            setSelectedCountries(arr);\n            //// BACKUP SELECTED_COUNTRIES IN ALL_COUNTRIES\n            setSelectedCountriesBk(arr);\n        }\n    }, [countries]);\n\n    // SELECTED COUNTRIES\n    useEffect(() => {\n\n    }, [selectedCountries])\n\n    function checkBoxHandler(e) {\n        const selectedCountriesCopy = [...selectedCountries];\n        selectedCountriesCopy.forEach(c => c.id === e.target.name && (c.selected = e.target.checked))\n        setSelectedCountries(selectedCountriesCopy);\n        countriesActivity(selectedCountries);\n    }\n    // SEARCH\n    const inputSearch = useRef();\n    const [searchText, setSearchText] = useState();\n\n    function handleResetButton(e) {\n        e.preventDefault();\n        setSearchText('');\n        inputSearch.current.value = '';\n    }\n    function handleSearchText(e) {\n        setSearchText(e.target.value);\n\n    }\n    // useEffect(() => {\n    //     console.log(\"ðŸš€ ~ file: SelectCountries.jsx ~ line 56 ~ SelectCountries ~ selectedCountries\", selectedCountries)\n    // }, [selectedCountries])\n\n    return (\n        <div>\n            {/* SEARCH TEXT */}\n            <div>\n                <label>Search:</label>\n                <input type=\"text\" id=\"searchText\" name=\"searchText\" onChange={handleSearchText} ref={inputSearch} />\n                <input type=\"button\" onClick={handleResetButton} value=\"Reset\" />\n            </div>\n            <ul>\n                {\n                    selectedCountries &&\n                    regionList.map(region =>\n                        <div>\n                            <h2>{region}</h2>\n                            {selectedCountries.map(c =>\n                                (c.region === region && (searchText \n                                                    ? c.name.toUpperCase().includes(searchText.toUpperCase()) \n                                                    : true)) &&\n                                (<li key={c.id}>\n                                    <input type='checkbox' name={c.id} onChange={checkBoxHandler} />\n                                    {c.name}\n                                    {c.flag_icon}\n                                </li>)\n                            )}\n                        </div>\n                    )\n                }\n\n\n            </ul>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}